import type { NextPage, GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import Script from "next/script";

import { useEffect } from "react";

import { useAppContext } from "../shared/context";

const Home: NextPage = ({ data }: any) => {
    const { activePen, setUrls } = useAppContext();

    useEffect(() => {
        function parseHTML(markup: string) {
            if (markup.toLowerCase().trim().indexOf("<!doctype") === 0) {
                const doc = document.implementation.createHTMLDocument("");
                doc.documentElement.innerHTML = markup;
                return doc;
            } else if ("content" in document.createElement("template")) {
                // Template tag exists!
                const el = document.createElement("template");
                el.innerHTML = markup;
                return el.content;
            } else {
                // Template tag doesn't exist!
                const docfrag = document.createDocumentFragment();
                const el = document.createElement("body");
                el.innerHTML = markup;
                for (let i = 0; 0 < el.childNodes.length; ) {
                    docfrag.appendChild(el.childNodes[i]);
                }
                return docfrag;
            }
        }

        const html = parseHTML(data);
        const links = html.querySelectorAll("a");

        const linksArray: HTMLAnchorElement[] = Array.from(links).filter(
            (link: HTMLAnchorElement) =>
                link.href.includes("https://codepen.io")
        );

        linksArray.forEach((link: HTMLAnchorElement) =>
            setUrls((urls: string[]) => [...urls, link.href])
        );

        const errorNode = html.querySelector("parsererror");
        if (errorNode) {
            console.error("Failed html parsing");
        }
    }, [data]);

    useEffect(() => {
        if (!activePen) return;
    }, [activePen]);

    return (
        <div className="relative h-full w-full">
            <Head>
                <title>UseGif</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="" />
            </Head>
            {activePen && (
                <div className="absolute inset-0 z-10 -top-14">
                    <div
                        className="h-full w-full"
                        dangerouslySetInnerHTML={{ __html: activePen.pen.html }}
                        onLoad={() => {
                            console.log("test");
                        }}
                    />
                </div>
            )}
            <div className="absolute h-full w-full flex justify-center items-center opacity-10 z-0">
                <Image
                    src="/placeholder.svg"
                    width={100}
                    height={100}
                    draggable="false"
                />
            </div>
        </div>
    );
};

export const getServerSideProps: GetServerSideProps = async () => {
    const res = await fetch(`http://localhost:3000/api/scrape`);
    const data = await res.json();

    return {
        props: { data },
    };
};

export default Home;
